{
  "NS Email Capture Script": {
    "scope": "typescript",
    "prefix": "nstemplateemailcapture",
    "body": [
      "/* eslint-disable @typescript-eslint/triple-slash-reference */",
      "// tslint:disable-next-line: no-reference",
      "/// <reference path='../../../node_modules/@hitc/netsuite-types/SuiteScriptV1.d.ts' />",
      "// tslint:disable-next-line: no-reference",
      "/// <reference path='../../../node_modules/@hitc/netsuite-types/EmailCapturePlugin.d.ts' />",
      "",
      "//",
      "//",
      "//",
      "// PLUGINS MUST BE COMPILED USING ES5",
      "// BEFORE DEPLOYING THIS SCRIPT",
      "// STOP THE TSC WATCH TASK",
      "// AND RUN `npm run compile-plugins`",
      "//",
      "//",
      "//",
      "",
      "// eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "// @ts-ignore",
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "function process(email: IEmail): void {",
      "  ${1}",
      "}",
      ""
    ]
  },
  "NS GL Impact Script": {
    "scope": "typescript",
    "prefix": "nstemplateglimpact",
    "body": [
      "/* eslint-disable @typescript-eslint/triple-slash-reference */",
      "// tslint:disable-next-line: no-reference",
      "/// <reference path='../../../node_modules/@hitc/netsuite-types/SuiteScriptV1.d.ts' />",
      "// tslint:disable-next-line: no-reference",
      "/// <reference path='../../../node_modules/@hitc/netsuite-types/SuiteGL.d.ts' />",
      "",
      "//",
      "//",
      "//",
      "// PLUGINS MUST BE COMPILED USING ES5",
      "// BEFORE DEPLOYING THIS SCRIPT",
      "// STOP THE TSC WATCH TASK",
      "// AND RUN `npm run compile-plugins`",
      "//",
      "//",
      "//",
      "",
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "function customizeGlImpact(transactionRecord: NLObjRecord, standardLines: StandardLines, customLines: CustomLines, book: AccountingBook): void {",
      "  ${1}",
      "}",
      ""
    ]
  },
  "NS User Event Script": {
    "scope": "typescript",
    "prefix": "nstemplateuserevent",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType UserEventScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const beforeLoad: EntryPoints.UserEvent.beforeLoad = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('beforeLoad error', err);",
      "\t\tnotify(err, ctx.newRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const beforeSubmit: EntryPoints.UserEvent.beforeSubmit = (ctx) => {",
      "\ttry {",
      "\t\t${5://}",
      "\t} catch (err) {",
      "\t\tlog.error('beforeSubmit error', err);",
      "\t\tnotify(err, ctx.newRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const afterSubmit: EntryPoints.UserEvent.afterSubmit = (ctx) => {",
      "\ttry {",
      "\t\t${6://}",
      "\t} catch (err) {",
      "\t\tlog.error('afterSubmit error', err);",
      "\t\tnotify(err, ctx.newRecord, errOptions);",
      "\t}",
      "};",
      "",
      "export = { beforeLoad, beforeSubmit, afterSubmit };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.1 User Event Script"
  },
  "NS Client Script": {
    "scope": "typescript",
    "prefix": "nstemplateclient",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType ClientScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notifyAsync } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const pageInit: EntryPoints.Client.pageInit = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('pageInit error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const fieldChanged: EntryPoints.Client.fieldChanged = (ctx) => {",
      "\ttry {",
      "\t\t${5://}",
      "\t} catch (err) {",
      "\t\tlog.error('fieldChanged error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const postSourcing: EntryPoints.Client.postSourcing = (ctx) => {",
      "\ttry {",
      "\t\t${6://}",
      "\t} catch (err) {",
      "\t\tlog.error('postSourcing error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const sublistChanged: EntryPoints.Client.sublistChanged = (ctx) => {",
      "\ttry {",
      "\t\t${7://}",
      "\t} catch (err) {",
      "\t\tlog.error('sublistChanged error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const lineInit: EntryPoints.Client.lineInit = (ctx) => {",
      "\ttry {",
      "\t\t${8://}",
      "\t} catch (err) {",
      "\t\tlog.error('lineInit error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const validateField: EntryPoints.Client.validateField = (ctx) => {",
      "\ttry {",
      "\t\t${9://}",
      "\t} catch (err) {",
      "\t\tlog.error('validateField error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const validateLine: EntryPoints.Client.validateLine = (ctx)=> {",
      "\ttry {",
      "\t\t${10://}",
      "\t} catch (err) {",
      "\t\tlog.error('validateLine error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const validateInsert: EntryPoints.Client.validateInsert = (ctx) => {",
      "\ttry {",
      "\t\t${11://}",
      "\t} catch (err) {",
      "\t\tlog.error('validateInsert error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const validateDelete: EntryPoints.Client.validateDelete = (ctx) => {",
      "\ttry {",
      "\t\t${12://}",
      "\t} catch (err) {",
      "\t\tlog.error('validateDelete error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "const saveRecord: EntryPoints.Client.saveRecord = (ctx) => {",
      "\ttry {",
      "\t\t${13://}",
      "\t} catch (err) {",
      "\t\tlog.error('saveRecord error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "};",
      "",
      "export = { pageInit, fieldChanged, postSourcing, sublistChanged, lineInit, validateField, validateLine, validateInsert, validateDelete, saveRecord };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Client Script"
  },
  "NS Bundle Installation Script": {
    "scope": "typescript",
    "prefix": "nstemplatebundleinstallation",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType BundleInstallationScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const beforeInstall: EntryPoints.BundleInstallation.beforeInstall = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('beforeInstall error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "const afterInstall: EntryPoints.BundleInstallation.afterInstall = (ctx) => {",
      "\ttry {",
      "\t\t${5://}",
      "\t} catch (err) {",
      "\t\tlog.error('afterInstall error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "const beforeUpdate: EntryPoints.BundleInstallation.beforeUpdate = (ctx) => {",
      "\ttry {",
      "\t\t${6://}",
      "\t} catch (err) {",
      "\t\tlog.error('beforeUpdate error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "const afterUpdate: EntryPoints.BundleInstallation.afterUpdate = (ctx) => {",
      "\ttry {",
      "\t\t${7://}",
      "\t} catch (err) {",
      "\t\tlog.error('afterUpdate error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "const beforeUninstall: EntryPoints.BundleInstallation.beforeUninstall = (ctx) => {",
      "\ttry {",
      "\t\t${8://}",
      "\t} catch (err) {",
      "\t\tlog.error('beforeUninstall error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "export = { beforeInstall, afterInstall, beforeUpdate, afterUpdate, beforeUninstall };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Bundle Installation Script"
  },
  "NS Map/Reduce Script": {
    "scope": "typescript",
    "prefix": "nstemplatemapreduce",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType MapReduceScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const getInputData: EntryPoints.MapReduce.getInputData = (ctx): unknown => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "",
      "\t\treturn { };",
      "\t} catch (err) {",
      "\t\tlog.error('getInputData error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn { };",
      "\t}",
      "};",
      "",
      "const map: EntryPoints.MapReduce.map = (ctx) => {",
      "\tconst result: unknown = JSON.parse(ctx.value);",
      "\tlog.debug('Result', result);",
      "",
      "\t${5://}",
      "};",
      "",
      "const reduce: EntryPoints.MapReduce.reduce = (ctx) => {",
      "\t${6://}",
      "};",
      "",
      "const summarize: EntryPoints.MapReduce.summarize = (ctx) => {",
      "\tlogSummary(ctx)",
      "};",
      "",
      "function logSummary(ctx: EntryPoints.MapReduce.summarizeContext): void {",
      "\tlog.debug('Seconds', ctx.seconds);",
      "\tlog.debug('Usage', ctx.usage);",
      "\tlog.debug('Yields', ctx.yields);",
      "\tlog.debug('Concurrency', ctx.concurrency);",
      "\tconst mapKeys = [];",
      "\tctx.mapSummary.keys.iterator().each((key) => {",
      "\t\tmapKeys.push(key);",
      "\t\treturn true;",
      "\t});",
      "\tlog.debug('MAP keys processed', mapKeys.length);",
      "\tctx.mapSummary.errors.iterator().each((key, error) => {",
      "\t\tlog.debug(`Map Error for key: ${key}`, error);",
      "\t\tnotify(JSON.parse(error), undefined, errOptions);",
      "\t\treturn true;",
      "\t});",
      "\tconst reduceKeys = [];",
      "\tctx.reduceSummary.keys.iterator().each((key) => {",
      "\t\treduceKeys.push(key);",
      "\t\treturn true;",
      "\t});",
      "\tlog.debug('Reduce keys processed', reduceKeys.length);",
      "\tctx.reduceSummary.errors.iterator().each((key, error) => {",
      "\t\tlog.debug(`Reduce Error for key: ${key}`, error);",
      "\t\tnotify(JSON.parse(error), undefined, errOptions);",
      "\t\treturn true;",
      "\t});",
      "}",
      "",
      "export = { getInputData, map, reduce, summarize };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Map/Reduce Script"
  },
  "NS Mass Update Script": {
    "scope": "typescript",
    "prefix": "nstemplatemassupdate",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType MassUpdateScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const each: EntryPoints.MassUpdate.each = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('each error', err);",
      "\t\tnotify(err, ctx, errOptions);",
      "\t}",
      "};",
      "",
      "export = { each };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Mass Update Script"
  },
  "NS Portlet Script": {
    "scope": "typescript",
    "prefix": "nstemplateportlet",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType Portlet",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const render: EntryPoints.Portlet.render = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('render error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "export = { render };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Portlet Script"
  },
  "NS RESTlet Script": {
    "scope": "typescript",
    "prefix": "nstemplaterestlet",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType Restlet",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const get = (ctx: EntryPoints.RESTlet.get): string | Record<string, unknown> => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('get error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn { };",
      "\t}",
      "\treturn { };",
      "};",
      "",
      "const put = (ctx: EntryPoints.RESTlet.put): string | Record<string, unknown> => {",
      "\ttry {",
      "\t\t${5://}",
      "\t} catch (err) {",
      "\t\tlog.error('put error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn { };",
      "\t}",
      "\treturn { };",
      "};",
      "",
      "const post = (ctx: EntryPoints.RESTlet.post): string | Record<string, unknown> => {",
      "\ttry {",
      "\t\t${6://}",
      "\t} catch (err) {",
      "\t\tlog.error('post error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn { };",
      "\t}",
      "\treturn { };",
      "};",
      "",
      "const delete_ = (ctx: EntryPoints.RESTlet.delete_): string | Record<string, unknown> => {",
      "\ttry {",
      "\t\t${7://}",
      "\t} catch (err) {",
      "\t\tlog.error('delete error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn { };",
      "\t}",
      "\treturn { };",
      "};",
      "",
      "export = { get, put, post, delete: delete_ };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x RESTlet Script"
  },
  "NS Scheduled Script": {
    "scope": "typescript",
    "prefix": "nstemplatescheduled",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType ScheduledScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const execute: EntryPoints.Scheduled.execute = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('execute error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "export = { execute };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Scheduled Script"
  },
  "NS Suitelet Script": {
    "scope": "typescript",
    "prefix": "nstemplatesuitelet",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType Suitelet",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const onRequest: EntryPoints.Suitelet.onRequest = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('onRequest error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "export = { onRequest };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Suitelet Script"
  },
  "NS Workflow Action Script": {
    "scope": "typescript",
    "prefix": "nstemplateworkflowaction",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType WorkflowActionScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const onAction: EntryPoints.WorkflowAction.onAction = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('onAction error', err);",
      "\t\tnotify(err, ctx.newRecord, errOptions);",
      "\t}",
      "};",
      "",
      "export = { onAction };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Workflow Action Script"
  },
  "NS SDF Installation Script": {
    "scope": "typescript",
    "prefix": "nstemplatesdfinstallation",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType SDFInstallationScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index.js';",
      "const errOptions: INotificationOpts = { slackUsername: ${3}, privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "const run: EntryPoints.SDFInstallation.run = (ctx) => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('run error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "};",
      "",
      "export = { run };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x SDF Installation Script"
  },
  "NS Import Module": {
    "scope": "typescript",
    "prefix": "nsimport",
    "body": [
      "import * as ${1} from 'N/${1|action,auth,cache,certificateControl,commerce/recordView,compress,config,crypto,crypto/certificate,currency,currentRecord,dataset,email,encode,error,file,format,format/i18n,http,https,https/clientCertificate,keyControl,log,piremoval,plugin,portlet,query,record,recordContext,redirect,render,runtime,search,sftp,sso,task,task/accounting/recognition,transaction,translation,ui/dialog,ui/message,ui/serverWidget,url,util,workbook,workflow,xml|}';"
    ],
    "description": "Import a NetSuite module"
  },
  "NS Import Error Notifier": {
    "scope": "typescript",
    "prefix": "nsimporterrornotifier",
    "body": [
      "import errorNotifier = require('../netsuite_modules/error-notification/index.js');${0}"
    ],
    "description": "Import the Error Notifier module"
  },
  "NS Import Export To File": {
    "scope": "typescript",
    "prefix": "nsimportexporttofile",
    "body": [
      "import exportToFile = require('../netsuite_modules/export-to-csv-excel-btn/index');${0}"
    ],
    "description": "Import TS-Polyfill"
  },
  "NS Duration Tracking": {
    "scope": "typescript",
    "prefix": [
      "nsduration",
      "nselapsed"
    ],
    "body": [
      "const startTime = new Date().getTime();",
      "${0}",
      "const elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "log.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);"
    ],
    "description": "Durration Tracking code snippet for NS scripts"
  },
  "NS Log.Audit": {
    "scope": "typescript",
    "prefix": "logaudit",
    "body": [
      "log.audit(`${1:MESSAGE}`, ${2});${0}"
    ],
    "description": "NS Log.Audit"
  },
  "NS Log.Debug": {
    "scope": "typescript",
    "prefix": "logdebug",
    "body": [
      "log.debug(`${1:MESSAGE}`, ${2});${0}"
    ],
    "description": "NS Log.Debug"
  },
  "NS Log.Error": {
    "scope": "typescript",
    "prefix": "logerror",
    "body": [
      "log.error(`${1:ERROR}`, ${2});${0}"
    ],
    "description": "NS Log.Error"
  },
  "NS Function Create Record Link": {
    "scope": "typescript",
    "prefix": "nsfunctioncreaterecordlink",
    "body": [
      "const createRecordLink = (recordType: string, recordId: string, isEditMode: boolean = false, linkText: string): string => {",
      "\tconst recURL = url.resolveRecord({ recordType, recordId, isEditMode });",
      "\treturn recURL && linkText ? `<a href=\"\\${recURL}\" target=\"_blank\">\\${linkText}</a>` : '';",
      "};${0}"
    ],
    "description": "NS Function Create Record Link"
  },
  "NS Function Generate Log URL": {
    "scope": "typescript",
    "prefix": "nsfunctiongeneratelogurl",
    "body": [
      "const generateLogURL = (recordId: (number | string), recordType: string): string => {",
      "\tconst scheme = 'https://';",
      "\tconst domain = url.resolveDomain({ hostType: url.HostType.APPLICATION });",
      "\tconst relURL = url.resolveRecord({ recordType, recordId, isEditMode: false });",
      "\treturn `\\${scheme}\\${domain}\\${relURL}`;",
      "};${0}"
    ],
    "description": "NS Function Generate Log URL"
  }
}
